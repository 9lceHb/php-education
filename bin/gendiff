#!/usr/bin/env php

<?php
$autoloadPath1 = __DIR__ . '/../../../autoload.php';
$autoloadPath2 = __DIR__ . '/../vendor/autoload.php';
if (file_exists($autoloadPath1)) {
    require_once $autoloadPath1;
} else {
    require_once $autoloadPath2;
}

use function Functional\flat_map;

$doc = <<<DOC
Generate diff

Usage:
  gendiff (-h|--help)
  gendiff (-v|--version)
  gendiff [--format <fmt>] <firstFile> <secondFile>


Options:
  -h --help                     Show this screen
  -v --version                  Show version
  --format <fmt>                Report format [default: stylish]

DOC;

function getNode($key, $value, $type)
{
    $node = [
        "key" => $key,
        "value" => $value,
        "type" => $type
    ];
    return $node;
}

function getValue($value)
{
    switch (gettype($value)) {
        case 'boolean':
            return $value ? 'true' : 'false';
        case 'NULL':
            return 'null';
        default:
            return $value;
    }
}

function gendiff($path1, $path2)
{
    $fullPath1 = realpath($path1);
    $fullPath2 = realpath($path2);
    $text1 = file_get_contents($fullPath1);
    $text2 = file_get_contents($fullPath2);
    $before = json_decode($text1, true);
    $after = json_decode($text2, true);
    $keysDeleted = array_keys(array_diff_key($before, $after));
    $keysAdded = array_keys(array_diff_key($after, $before));
    $keysIntersected = array_keys(array_intersect_key($before, $after));
    $deletedElem = array_map(fn($key) => getNode($key, $before[$key], 'deleted'), $keysDeleted);
    $addedElem = array_map(fn($key) => getNode($key, $after[$key], 'added'), $keysAdded);
    $sameKeyElem = flat_map($keysIntersected, function ($key) use ($before, $after) {
        if ($before[$key] === $after[$key]) {
            return [getNode($key, $before[$key], 'unchanged')];
        }
        return [getNode($key, $before[$key], 'changedFrom'), getNode($key, $after[$key], 'changedTo')];
    });
    // $sameKeyElem = flatten($sameKeyElem);
    $result = array_merge($deletedElem, $addedElem, $sameKeyElem);
    usort($result, function ($node1, $node2) {
        if ($node1["key"] !== $node2["key"]) {
            return $node1["key"] <=> $node2["key"];
        }
        if ($node1["type"] === 'changedFrom') {
            return -1;
        }
        if ($node1["type"] === 'changedTo') {
            return 1;
        }
        return 0;
    });
    $resultStrings = array_map(function ($node) {
        // $key = var_export($node["key"]);
        // $value = var_export($node['value']);
        $key = $node["key"];
        $value = getValue($node['value']);
        if ($node["type"] === 'deleted' || $node["type"] === 'changedFrom') {
            return "- {$key}: {$value}";
        }
        if ($node["type"] === 'added' || $node["type"] === 'changedTo') {
            return "+ {$key}: {$value}";
        }
        return "  {$key}: {$value}";
    }, $result);
    return implode("\n", $resultStrings);
}

$args = Docopt::handle($doc, array('version' => 'gendiff 1.0'));
$path1 = $args["<firstFile>"];
$path2 = $args["<secondFile>"];

echo gendiff($path1, $path2) . PHP_EOL;
// gendiff($path1, $path2);
// print_r(json_encode($args['<firstFile>']));
// foreach ($args as $k=>$v)
//     print_r(json_encode($args['<firstFile>']));
    // echo $k.': '.json_encode($v).PHP_EOL;
    // echo $k . json_encode($v).PHP_EOL;
